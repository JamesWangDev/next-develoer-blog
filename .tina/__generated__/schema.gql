# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getChallengesDocument(relativePath: String): ChallengesDocument!
  getChallengesList(before: String, after: String, first: Int, last: Int): ChallengesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PostsDocument | ChallengesDocument

type Posts {
  title: String
  excerpt: String
  hero: String
  keywords: String
  date: String
  inProgress: Boolean
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type Challenges {
  title: String
  keywords: String
  date: String
  inProgress: Boolean
  body: String
}

type ChallengesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Challenges!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ChallengesConnectionEdges {
  cursor: String
  node: ChallengesDocument
}

type ChallengesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [ChallengesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateChallengesDocument(relativePath: String!, params: ChallengesMutation!): ChallengesDocument!
}

input DocumentMutation {
  posts: PostsMutation
  challenges: ChallengesMutation
}

input PostsMutation {
  title: String
  excerpt: String
  hero: String
  keywords: String
  date: String
  inProgress: Boolean
  body: String
}

input ChallengesMutation {
  title: String
  keywords: String
  date: String
  inProgress: Boolean
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  